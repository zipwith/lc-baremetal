[Sample command:

    milc intervals.llc -m -pcososro -gintervals.dot

]

TODO: Should the operations for inserting and removing
intervals be guarded by code to check for empty intervals?

> require "core.llc"
> require "ix.llc"
> require "wvram.llc"
> require "selectionsort.llc"
> require "noinline.mil"

INTRODUCTION:

When we refer to a particular machine as a "32-bit" (or,
respectively, "64-bit") system, we typically mean that it uses
32-bit values (respectively, 64-bit values) as addresses for
individual bytes of memory.  This means, for example, that a
32-bit computer can potentially access up to 2^32 bytes (or,
equivalently, 4GB) of memory just by using different address
values.  In practice, however, the designers of the system may
not have memory installed at all of these addresses: if the
programs that the system is designed to run do not need that
much memory, for example, then it may be possible to reduce the
cost of building the system by installing a smaller amount of
memory.  In addition, the designers of the system may decide to
reserve certain regions of memory for special purposes: to store
the code or data for the operating system, for example, to
provide access to "memory mapped" I/O devices.

The details about which regions of addresses are valid is often
referred to as the "memory map" for the system, and figuring out
those details is one of the first tasks that a typical operating
system has to deal during the boot process.  This information is
needed, for example, to determine which regions of memory can
safely be allocated to user programs.

In the rest of this file, we will assume that the key inputs
to this process are two lists of intervals, one describing
the available regions of memory and one specifying the
reserved regions.  Each individual interval is characterized
by a pair of endpoint addresses, `lo` and `hi`, which
represents the contiguous block of memory between (and
including) those two addresses.  More complex regions of
memory can then be described by taking the union of a
collection of intervals.

The specific algorithm that we will use for determining the
memory map is as follows:

- First, we calculate the union of all the available regions
  of memory in a data structure called `IntervalSet`.  It is
  possible for multiple intervals to be combined into a
  single interval during this process if the inputs overlap
  with or are immediately adjacent to one another.

- Second, we update the `IntervalSet` to remove any region
  of memory that is included in the reserved list.  This may
  require removing all or parts of some of the intervals
  that were added in the first step.  At the end of this
  process, the `IntervalSet` represents the set of all
  memory addresses that are available but not marked as
  reserved.

- Finally, we split each of the remaining intervals into a
  collection of flexpages ("FPages" for short), each of
  which is a block of 2^k addresses, starting at an address
  that is a multiple of 2^k for memory for some size k.

The last step is not necessarily something that we would
expect to find in an arbitrary operating system.  We include
it here in preparation for packaging available/unused
regions of memory as "untyped memory" objects in HaL4.

[TODO: Add notes explaining specific context:

- This code is executed in the early stages of initializing
  memory, so there is no real way to use dynamic memory
  allocation because we are still in the process of trying
  to determine what memory is available.  (We could add a
  heap to support dynamic memory allocation in Habit, but
  the size of the heap would have to be statically
  determined, so this would still not give true dynamic
  allocation.)

- In practice, the lists of available and reserved regions
  are likely to be fairly small, so we can typically make do
  with relatively small, statically allocated structures
  without running in to problems with overflow.
  (Nonetheless, the code should/must still be written in a
  way that handles overflows properly if a statically
  allocated table is full.)

- We may not be able to use all of the available memory if
  the number of intervals is too large or if there are
  fragments of memory that cannot be use because they are
  not large enough or not properly aligned.  Although it is
  undesirable, some small amount of "wasted" space is not
  likely to be a problem in practice.  Moreover, we can
  always choose to prioritize keeping larger regions of
  memory instead of smaller regions if there is not enough
  space to keep them all.

]

INTERVALS:

An interval is a non-empty, contiguous range of unsigned
integers that is described by the values of its smallest
(`lo`) and largest (`hi`) members:

> bitdata Interval = Interval [ lo :: Word | hi :: Word ]

In any valid interval, the `lo` value should be less than or
equal to the associated `hi` value.  Any `Interval` value
that does not satisfy this property can be discarded or
treated as empty.

We often talk about intervals that are *disjoint*, meaning
that they have no element in common.  An alternative way to
think about this is that the upper bound of one interval
must be less than the lower bound of the other if the two
intervals are disjoint:

> disjoint    :: Interval -> Interval -> Bool
> disjoint i j = before i j || before j i
>  where before    :: Interval -> Interval -> Bool
>        before i j = i.hi < j.lo

In what follows, however, we will work with a slightly
stronger relation, specifying that a pair of intervals are
*separate* if there is at least one value v between the
upper bound of one interval and the lower bound of the
other.  This condition is both necessary and sufficient to
conclude that the union of the two intervals cannot itself
be described as an interval because it cannot include the
value v.

> separate    :: Interval -> Interval -> Bool
> separate i j = strictlyBefore i j || strictlyBefore j i
>  where strictlyBefore    :: Interval -> Interval -> Bool
>        strictlyBefore i j = i.hi !< j.lo
>        x !< y             = (x < y) && ((x+1) < y)

The structure of this definition clearly mirrors the
previous definition for disjoint, but it is written in terms
of a new "strictly less than" operator, written as !<, in
place of the conventional less than operator.  At first
glance, the definition of !< seems a little odd: why would
we use a conjunction here when the second conjunct,
((x+1)<y), clearly implies the first?  The complication that
we are addressing is the possibility for overflow with
unsigned arithmetic.  Specifically, it is possible for (x+1)
to be zero if x is the largest possible unsigned integer,
and hence for (x+1)<y to be True, even if x<y is not.  In
the definition above, the test x<y establishes not only the
obvious fact that x is less than y, but also that x is not
the largest possible unsigned integer, ensuring that the
subsequent calculation of x+1 will not cause an overflow.
Would it be better to rewrite the right hand side in the
definition of !< as (x/=maxBound && (x+1)<=y)?  Perhaps, but
the formulation we have used avoids the need for an awkward
constant; is arguably just as clear (given that
understanding either form requires us to be thinking
carefully about overflow); and it accomplishes more useful
work (because, in practice, x<y will be False much more
often than x!=maxBound, and hence we will reduce the number
of times that we need to evaluate the second conjunct).

If a given pair of intervals are not separate, then either
they overlap or are immediately adjacent, and their union
must also be an interval.  The following function uses this
observation to implement a merge operation that, where
possible, combines a pair of intervals into a single
interval.  We use a Maybe result type to encode partiality:
we return a Nothing value if the two inputs are separate:

> merge    :: Interval -> Interval -> Maybe Interval
> merge i j = if separate i j
>               then Nothing
>               else Just Interval[ lo = i.lo `min` j.lo
>                                 | hi = i.hi `max` j.hi ]

> min, max :: Word -> Word -> Word
> x `min` y = if y < x then y else x
> x `max` y = if x < y then y else x

In the following, we will be working with a set of `Word`
values that is represented by an array of mutually
separate `Interval`s and a pointer to the last array
element that is currently in use.  New intervals can be
added to the array to expand the set, up to the maximum
capacity that is specified by the constant `NumIntervals`:

> struct IntervalSet
>   [ array <- initAllStored Interval[ lo=0 | hi=0 ] :: Array NumIntervals (Stored Interval)
>   | last  <- initStored Empty                      :: Stored Last ]

> type NumIntervals  = 8  -- maximum number of intervals

The `last` field in each `IntervalSet` records the index
of the last entry in the array that is currently being used
or is `Empty` if there are no intervals in the set:

> bitdata Last = Empty [                         1 ]
>              | Last  [ n :: Ix NumIntervals | B0 ]

The `Last` type defined here is an obvious analogue of a
standard `Maybe` datatype, except that it also specifies a
precise bit-level layout that is needed here so that we can
store `Last` values in memory-based structures like
`IntervalSet`.  (Of course, we would prefer to use a
parameterized bitdata type here so that the general pattern
used here can be reused with other array sizes.
Another alternative would be to allow the direct use of
standard parameterized types like `Maybe` in memory-based
structures; this would require some additional mechanism to
determine the `BitSize` of the resulting values and/or the
`ByteSize` of the corresponding memory areas.)

> export putIntervals
> putIntervals :: Ref IntervalSet -> Proc Unit
> putIntervals intset
>   = case<- get intset.last of
>       Empty  -> puts "Interval set is empty\n"
>       Last l -> do puts "Interval set contains:\n"
>                    loop ix0 l.n
>                    putUnsigned (1 + ixToBit l.n)
>                    puts " intervals\n"
>  where
>   loop i n
>     = do int <- get (intset.array @ i)
>          puts "  "
>          putInterval int
>          puts "\n"
>          case i `ltInc` n of
>            Nothing -> return Unit
>            Just j  -> loop j n

> export putInterval :: Interval -> Proc Unit
> putInterval int     = do puts "[0x"
>                          putHex int.lo
>                          puts " - 0x"
>                          putHex int.hi
>                          puts "]"

Adding an interval to a set may require the value of
`numIntervals` to be increased by one (if it is not already
at the maximum allowed value).  However, it is also possible
that the value of `numIntervals` will not be changed at all,
or that it might even decrease, if the new interval can be
merged with one or more of the intervals already in the set.

> export insertInterval
> insertInterval :: Ref IntervalSet -> Interval -> Proc Bool
> insertInterval intset int
>   = case<- get intset.last of          -- find index of last item
>       Empty  -> saveLast ix0 int       -- set is empty; save int and finish
>       Last l -> loop ix0 l.n int        -- otherwise, merge int with other elements
>  where 
>   loop i n int   -- index to next stored interval, index to last stored interval, interval to insert
>     = do inti <- get (intset.array @ i)
>          case merge int inti of
>            Nothing ->                  -- intervals are separate, so cannot be combined
>              case i `ltInc` n of
>                Just j  ->              -- move on to next stored interval
>                  loop j n int
>
>                Nothing ->              -- last stored interval
>                  case incIx i of       -- is there room to extend?
>                    Just j  -> saveLast j int
>                    Nothing -> do set intset.last Last[n=i]
>                                  return False
>
>            Just newint ->              -- intervals are merged; remove the stored interval
>              case i `ltDec` n of
>                Nothing ->              -- we are at the last element in the array
>                  saveLast n newint
>
>                Just newn ->            -- remove the last element
>                  do (intset.array @ n) >-> (intset.array @ i)
>                     loop i newn newint -- continue merging with the new interval
>
>   saveLast n int = do set (intset.array @ n) int
>                       set intset.last Last[n]
>                       return True

We also define a `reserveInterval` operation that updates an
`IntervalSet` by removing any intervals (or parts of
intervals) that overlap with a specified "reserved"
interval, `rint`.  There are five possible cases to consider
for each item, `int`, in the starting `IntervalSet`:

1) If `rint` and `int` are disjoint, then `int` will remain
in the `IntervalSet`.

2) If `rint` is nested strictly inside `int` (meaning that
`int.lo < rint.lo <= rint.hi < int.hi`), then we will need to
replace `int` with two smaller intervals, one on either side
of `rint`.  Assuming all of the items in the `IntervalSet`
are separate, we can be sure that `rint` will be disjoint
from all other intervals in the set and can terminate the
`reserveInterval` call at this point.  If we need to split
an interval like this when the set is already full, then we
will not be able to include both of the subintervals in the
set.  In this situation, the following code just replaces
the original interval with the left subinterval.  An
alternative approach would be to keep the larger of the two
subintervals, but we have avoided this (modest) complication
in our current implementation because we do not expect this
situation to occur in practice.  (So long as we choose a
large enough value for `NumIntervals`.)

3) The reserved interval, `rint`, intersects with the right
edge of `int` (so `int.lo < rint.lo <= int.hi <= rint.hi`),
in which case we can still keep the left portion of `int`,
corresponding to `int[hi=rint.lo-]`.

4) The reserved interval, `rint`, intersects with the left
edge of `int` (so `rint.lo <= int.lo <= rint.hi < int.hi`),
in which case we can still keep the right portion of `int`,
corresponding to `int[lo=rint.hi+1]`.

5) The reserved interval, `rint`, includes the whole of `int`
(so `rint.lo <= int.lo <= int.hi <= rint.hi`), in which case
we should remove `int` from the interval set altogether,
replacing it if necessary with the last interval in the array.

The points in the following code that correspond to each of the
five cases described above are identified by comments on the right
hand side:

> export reserveInterval
> reserveInterval :: Ref IntervalSet -> Interval -> Proc Unit
> reserveInterval intset rint
>   = case<- get intset.last of
>       Empty  -> return Unit
>       Last l -> loop l.n l.n
>
>  where
>   loop i n    -- index to current interval, index to last interval
>     = do int <- get (intset.array @ i)
>          if disjoint int rint then
>            next i n                                          -- (1)
>
>          else 
>            if int.lo < rint.lo then
>              if rint.hi < int.hi then
>                set (intset.array @ i) int[hi=rint.lo-1]      -- (2)
>                case incIx n of
>                  Nothing ->
>                    set intset.last Last[n]
>
>                  Just m ->
>                    set (intset.array @ m) int[lo=rint.hi+1]
>                    set intset.last Last[n=m]
>
>              else
>                set (intset.array @ i) int[hi=rint.lo-1]      -- (3)
>                next i n
>
>            else
>              if rint.hi < int.hi then
>                set (intset.array @ i) int[lo=rint.hi+1]      -- (4)
>                next i n
>
>              else
>                case decIx n of                               -- (5)
>                  Just m
>                    -> (intset.array @ n) >-> (intset.array @ i)
>                       next i m
>
>                  Nothing
>                    -> set intset.last Empty
>
>   next i n
>     = case decIx i of
>         Just j  -> loop j n
>         Nothing -> set intset.last Last[n]

We also include a function for sorting the intervals in a given
`IntervalSet` (by comparing their `lo` values, although if our
algorithms are correct, then all of the stored intervals are
separate and the results will also be sorted by their `hi`
values).  There is no strict requirement for sorted intervals
in our specific application, but using this operation might help
to make debugging output a little easier to read and interpret.

> export sortIntervals
> sortIntervals :: Ref IntervalSet -> Proc Unit
> sortIntervals intset
>   = case<- get intset.last of
>       Empty  -> return Unit
>       Last l -> selectionSortSeg intervalLt intset.array ix0 l.n
>  where intervalLt      :: Interval -> Interval -> Bool
>        a `intervalLt` b = a.lo < b.lo

FLEXPAGES:

> lowBits    :: Word -> Word
> lowBits n   = (1 `shl` n) - 1

> minFPageBits   :: Word
> minFPageBits    = 12

> maxFPageBits   :: Word
> maxFPageBits    = 32

> pageMask   :: Word
> pageMask    = lowBits minFPageBits

> pageStart  :: Word -> Word
> pageStart a = a `and` not pageMask

> pageEnd    :: Word -> Word
> pageEnd a   = a `or` pageMask

> pageUp     :: Word -> Word
> pageUp a    = pageStart (a + pageMask)

> pageDown   :: Word -> Word
> pageDown a  = pageEnd (a - pageMask)

> validFPage :: Interval -> Word -> Bool
> validFPage int bits
>   = (minFPageBits <= bits)     &&   -- minimal size is a page
>     (bits <= maxFPageBits)     &&   -- maximal size is word width
>     ((int.lo `and` mask) == 0) &&   -- start is aligned
>     ((int.lo + mask) == int.hi)     -- end is consistent with size
>     where mask = lowBits bits

> type PutFPage = Interval -> Word -> Proc Unit

> export enumFPages1 :: Interval -> Proc Unit
> enumFPages1 int = enumFPages putFPage int.lo int.hi

> --external outFPage :: PutFPage
> putFPage :: PutFPage
> putFPage int size
>   = do puts "  "
>        putInterval int
>        puts " "
>        putSize ((int.hi - int.lo) + 1)
>        puts " ("
>        putUnsigned size
>        puts " bits)\n"

> enumFPages :: PutFPage -> Word -> Word -> Proc Unit
> enumFPages out lo hi
>   = do if initLo < lo then return Unit else findFPage initLo
>  where
>   initLo   = pageUp lo
>   initMask = lowBits minFPageBits
>   findFPage lo
>      = let search mask bits
>              -- Invariant: There is a valid fpage of size bits (with the
>              -- corresponding mask) at starting address lo.
>              = do let newmask = (2*mask)+1
>                   if ((lo `and` newmask) /= 0) || (hi < (lo+newmask))
>                     then found mask bits
>                     else let newBits = bits+1 in
>                          if newBits < maxFPageBits
>                            then search newmask newBits
>                            else found newmask newBits
>            found  mask bits
>              = do let end = lo + mask
>                   out Interval[lo|hi=end] bits
>                   if end < hi then findFPage (end+1)
>                               else return Unit
>        in do if hi < (lo+initMask)
>                then return Unit
>                else search initMask minFPageBits

